/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.maxlong.thrift.demo;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-06-24")
public class RequestStruct implements org.apache.thrift.TBase<RequestStruct, RequestStruct._Fields>, java.io.Serializable, Cloneable, Comparable<RequestStruct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RequestStruct");

  private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField REQUEST_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("requestData", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ROUTE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("routeInfo", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RequestStructStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RequestStructTupleSchemeFactory());
  }

  public String requestId; // required
  public String requestData; // required
  public String routeInfo; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REQUEST_ID((short)1, "requestId"),
    REQUEST_DATA((short)2, "requestData"),
    ROUTE_INFO((short)3, "routeInfo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REQUEST_ID
          return REQUEST_ID;
        case 2: // REQUEST_DATA
          return REQUEST_DATA;
        case 3: // ROUTE_INFO
          return ROUTE_INFO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUEST_DATA, new org.apache.thrift.meta_data.FieldMetaData("requestData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROUTE_INFO, new org.apache.thrift.meta_data.FieldMetaData("routeInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RequestStruct.class, metaDataMap);
  }

  public RequestStruct() {
  }

  public RequestStruct(
    String requestId,
    String requestData,
    String routeInfo)
  {
    this();
    this.requestId = requestId;
    this.requestData = requestData;
    this.routeInfo = routeInfo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RequestStruct(RequestStruct other) {
    if (other.isSetRequestId()) {
      this.requestId = other.requestId;
    }
    if (other.isSetRequestData()) {
      this.requestData = other.requestData;
    }
    if (other.isSetRouteInfo()) {
      this.routeInfo = other.routeInfo;
    }
  }

  public RequestStruct deepCopy() {
    return new RequestStruct(this);
  }

  @Override
  public void clear() {
    this.requestId = null;
    this.requestData = null;
    this.routeInfo = null;
  }

  public String getRequestId() {
    return this.requestId;
  }

  public RequestStruct setRequestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

  public void unsetRequestId() {
    this.requestId = null;
  }

  /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestId() {
    return this.requestId != null;
  }

  public void setRequestIdIsSet(boolean value) {
    if (!value) {
      this.requestId = null;
    }
  }

  public String getRequestData() {
    return this.requestData;
  }

  public RequestStruct setRequestData(String requestData) {
    this.requestData = requestData;
    return this;
  }

  public void unsetRequestData() {
    this.requestData = null;
  }

  /** Returns true if field requestData is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestData() {
    return this.requestData != null;
  }

  public void setRequestDataIsSet(boolean value) {
    if (!value) {
      this.requestData = null;
    }
  }

  public String getRouteInfo() {
    return this.routeInfo;
  }

  public RequestStruct setRouteInfo(String routeInfo) {
    this.routeInfo = routeInfo;
    return this;
  }

  public void unsetRouteInfo() {
    this.routeInfo = null;
  }

  /** Returns true if field routeInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetRouteInfo() {
    return this.routeInfo != null;
  }

  public void setRouteInfoIsSet(boolean value) {
    if (!value) {
      this.routeInfo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REQUEST_ID:
      if (value == null) {
        unsetRequestId();
      } else {
        setRequestId((String)value);
      }
      break;

    case REQUEST_DATA:
      if (value == null) {
        unsetRequestData();
      } else {
        setRequestData((String)value);
      }
      break;

    case ROUTE_INFO:
      if (value == null) {
        unsetRouteInfo();
      } else {
        setRouteInfo((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REQUEST_ID:
      return getRequestId();

    case REQUEST_DATA:
      return getRequestData();

    case ROUTE_INFO:
      return getRouteInfo();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REQUEST_ID:
      return isSetRequestId();
    case REQUEST_DATA:
      return isSetRequestData();
    case ROUTE_INFO:
      return isSetRouteInfo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RequestStruct)
      return this.equals((RequestStruct)that);
    return false;
  }

  public boolean equals(RequestStruct that) {
    if (that == null)
      return false;

    boolean this_present_requestId = true && this.isSetRequestId();
    boolean that_present_requestId = true && that.isSetRequestId();
    if (this_present_requestId || that_present_requestId) {
      if (!(this_present_requestId && that_present_requestId))
        return false;
      if (!this.requestId.equals(that.requestId))
        return false;
    }

    boolean this_present_requestData = true && this.isSetRequestData();
    boolean that_present_requestData = true && that.isSetRequestData();
    if (this_present_requestData || that_present_requestData) {
      if (!(this_present_requestData && that_present_requestData))
        return false;
      if (!this.requestData.equals(that.requestData))
        return false;
    }

    boolean this_present_routeInfo = true && this.isSetRouteInfo();
    boolean that_present_routeInfo = true && that.isSetRouteInfo();
    if (this_present_routeInfo || that_present_routeInfo) {
      if (!(this_present_routeInfo && that_present_routeInfo))
        return false;
      if (!this.routeInfo.equals(that.routeInfo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_requestId = true && (isSetRequestId());
    list.add(present_requestId);
    if (present_requestId)
      list.add(requestId);

    boolean present_requestData = true && (isSetRequestData());
    list.add(present_requestData);
    if (present_requestData)
      list.add(requestData);

    boolean present_routeInfo = true && (isSetRouteInfo());
    list.add(present_routeInfo);
    if (present_routeInfo)
      list.add(routeInfo);

    return list.hashCode();
  }

  @Override
  public int compareTo(RequestStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestData()).compareTo(other.isSetRequestData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestData, other.requestData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRouteInfo()).compareTo(other.isSetRouteInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRouteInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.routeInfo, other.routeInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RequestStruct(");
    boolean first = true;

    sb.append("requestId:");
    if (this.requestId == null) {
      sb.append("null");
    } else {
      sb.append(this.requestId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestData:");
    if (this.requestData == null) {
      sb.append("null");
    } else {
      sb.append(this.requestData);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("routeInfo:");
    if (this.routeInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.routeInfo);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RequestStructStandardSchemeFactory implements SchemeFactory {
    public RequestStructStandardScheme getScheme() {
      return new RequestStructStandardScheme();
    }
  }

  private static class RequestStructStandardScheme extends StandardScheme<RequestStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RequestStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REQUEST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestId = iprot.readString();
              struct.setRequestIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REQUEST_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestData = iprot.readString();
              struct.setRequestDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ROUTE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.routeInfo = iprot.readString();
              struct.setRouteInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RequestStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.requestId != null) {
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeString(struct.requestId);
        oprot.writeFieldEnd();
      }
      if (struct.requestData != null) {
        oprot.writeFieldBegin(REQUEST_DATA_FIELD_DESC);
        oprot.writeString(struct.requestData);
        oprot.writeFieldEnd();
      }
      if (struct.routeInfo != null) {
        oprot.writeFieldBegin(ROUTE_INFO_FIELD_DESC);
        oprot.writeString(struct.routeInfo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RequestStructTupleSchemeFactory implements SchemeFactory {
    public RequestStructTupleScheme getScheme() {
      return new RequestStructTupleScheme();
    }
  }

  private static class RequestStructTupleScheme extends TupleScheme<RequestStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RequestStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRequestId()) {
        optionals.set(0);
      }
      if (struct.isSetRequestData()) {
        optionals.set(1);
      }
      if (struct.isSetRouteInfo()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetRequestId()) {
        oprot.writeString(struct.requestId);
      }
      if (struct.isSetRequestData()) {
        oprot.writeString(struct.requestData);
      }
      if (struct.isSetRouteInfo()) {
        oprot.writeString(struct.routeInfo);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RequestStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.requestId = iprot.readString();
        struct.setRequestIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.requestData = iprot.readString();
        struct.setRequestDataIsSet(true);
      }
      if (incoming.get(2)) {
        struct.routeInfo = iprot.readString();
        struct.setRouteInfoIsSet(true);
      }
    }
  }

}

